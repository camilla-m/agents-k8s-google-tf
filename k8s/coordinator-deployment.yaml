apiVersion: apps/v1
kind: Deployment
metadata:
  name: travel-adk-coordinator
  namespace: adk-travel
  labels:
    app: travel-adk-coordinator
    component: coordinator
    version: "1.0"
    tier: backend
  annotations:
    description: "Google ADK Travel Coordinator - Multi-agent orchestration service"
    deployment.kubernetes.io/revision: "1"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0  # Ensure zero downtime
  selector:
    matchLabels:
      app: travel-adk-coordinator
  template:
    metadata:
      labels:
        app: travel-adk-coordinator
        component: coordinator
        version: "1.0"
        tier: backend
      annotations:
        # Prometheus scraping configuration
        prometheus.io/scrape: "true"
        prometheus.io/port: "8090"
        prometheus.io/path: "/metrics"
        # Force pod restart on config changes
        configmap.reloader.stakater.com/reload: "adk-config,adk-logging-config"
        secret.reloader.stakater.com/reload: "adk-credentials,adk-api-keys"
    spec:
      serviceAccountName: adk-agents
      
      # Security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        
      # Init container to validate configuration
      initContainers:
      - name: config-validator
        image: gcr.io/PROJECT_ID/travel-adk-coordinator:latest
        command: ['python', '-c']
        args:
        - |
          import os
          import sys
          
          print("üîç Validating ADK configuration...")
          
          # Check required environment variables
          required_vars = ['GOOGLE_CLOUD_PROJECT', 'GOOGLE_CLOUD_LOCATION']
          missing_vars = []
          
          for var in required_vars:
            if not os.getenv(var):
              missing_vars.append(var)
          
          if missing_vars:
            print(f"‚ùå Missing required variables: {missing_vars}")
            sys.exit(1)
            
          # Check credentials file
          cred_path = os.getenv('GOOGLE_APPLICATION_CREDENTIALS')
          if cred_path and not os.path.exists(cred_path):
            print(f"‚ö†Ô∏è  Credentials file not found: {cred_path}")
          
          print("‚úÖ Configuration validation passed")
          
        env:
        - name: GOOGLE_CLOUD_PROJECT
          valueFrom:
            configMapKeyRef:
              name: adk-config
              key: GOOGLE_CLOUD_PROJECT
        - name: GOOGLE_CLOUD_LOCATION
          valueFrom:
            configMapKeyRef:
              name: adk-config
              key: GOOGLE_CLOUD_LOCATION
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: /var/secrets/google/service-account-key
        volumeMounts:
        - name: adk-credentials
          mountPath: /var/secrets/google
          readOnly: true
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
            
      containers:
      - name: coordinator
        image: gcr.io/PROJECT_ID/travel-adk-coordinator:latest
        imagePullPolicy: Always
        
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 8090
          name: metrics
          protocol: TCP
        
        # Environment variables from ConfigMap
        env:
        - name: GOOGLE_CLOUD_PROJECT
          valueFrom:
            configMapKeyRef:
              name: adk-config
              key: GOOGLE_CLOUD_PROJECT
        - name: GOOGLE_CLOUD_LOCATION
          valueFrom:
            configMapKeyRef:
              name: adk-config
              key: GOOGLE_CLOUD_LOCATION
        - name: ADK_VERSION
          valueFrom:
            configMapKeyRef:
              name: adk-config
              key: ADK_VERSION
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: adk-config
              key: LOG_LEVEL
        - name: DEBUG
          valueFrom:
            configMapKeyRef:
              name: adk-config
              key: DEBUG
        - name: HOST
          valueFrom:
            configMapKeyRef:
              name: adk-config
              key: HOST
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: adk-config
              key: PORT
        - name: METRICS_PORT
          valueFrom:
            configMapKeyRef:
              name: adk-config
              key: METRICS_PORT
        - name: CONVERSATION_TIMEOUT
          valueFrom:
            configMapKeyRef:
              name: adk-config
              key: CONVERSATION_TIMEOUT
        - name: MAX_CONVERSATION_TURNS
          valueFrom:
            configMapKeyRef:
              name: adk-config
              key: MAX_CONVERSATION_TURNS
        - name: THREAD_POOL_MAX_WORKERS
          valueFrom:
            configMapKeyRef:
              name: adk-config
              key: THREAD_POOL_MAX_WORKERS
        
        # Credentials and secrets
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: /var/secrets/google/service-account-key
        - name: GEMINI_API_KEY
          valueFrom:
            secretKeyRef:
              name: adk-api-keys
              key: gemini-api-key
              optional: true
              
        # Pod metadata for self-awareness
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        
        # Volume mounts
        volumeMounts:
        - name: adk-credentials
          mountPath: /var/secrets/google
          readOnly: true
        - name: logging-config
          mountPath: /app/config/logging
          readOnly: true
        - name: agent-prompts
          mountPath: /app/config/prompts
          readOnly: true
        - name: tmp-volume
          mountPath: /tmp
        
        # Resource requirements
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "2Gi"
            cpu: "1000m"
            ephemeral-storage: "2Gi"
        
        # Health checks
        startupProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30  # Allow 5 minutes for startup
          successThreshold: 1
          
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
          
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 20
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        
        # Security context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false  # Flask needs to write temp files
          capabilities:
            drop:
            - ALL
        
        # Lifecycle hooks
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "sleep 10"]  # Grace period for connections to drain
      
      # Volumes
      volumes:
      - name: adk-credentials
        secret:
          secretName: adk-credentials
          optional: false
          defaultMode: 0400
          items:
          - key: service-account-key
            path: service-account-key
      - name: logging-config
        configMap:
          name: adk-logging-config
          defaultMode: 0644
      - name: agent-prompts
        configMap:
          name: adk-agent-prompts
          defaultMode: 0644
      - name: tmp-volume
        emptyDir:
          sizeLimit: 1Gi
      
      # Pod scheduling and affinity
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - travel-adk-coordinator
              topologyKey: kubernetes.io/hostname
      
      # Tolerations for node issues
      tolerations:
      - key: node.kubernetes.io/not-ready
        operator: Exists
        effect: NoExecute
        tolerationSeconds: 300
      - key: node.kubernetes.io/unreachable
        operator: Exists
        effect: NoExecute
        tolerationSeconds: 300
      
      # Pod termination settings
      terminationGracePeriodSeconds: 30
      restartPolicy: Always
      
      # DNS settings
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
        - name: ndots
          value: "2"
        - name: edns0

---
apiVersion: v1
kind: Service
metadata:
  name: travel-adk-coordinator
  namespace: adk-travel
  labels:
    app: travel-adk-coordinator
    component: coordinator
    version: "1.0"
  annotations:
    description: "Service for Google ADK Travel Coordinator"
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"  # For AWS
    cloud.google.com/load-balancer-type: "External"  # For GCP
spec:
  selector:
    app: travel-adk-coordinator
  type: LoadBalancer
  
  ports:
  - name: http
    port: 80
    targetPort: 8080
    protocol: TCP
  - name: metrics
    port: 8090
    targetPort: 8090
    protocol: TCP
  
  # Session affinity for better conversation continuity
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 3600  # 1 hour
  
  # LoadBalancer configuration
  loadBalancerSourceRanges:
  - 0.0.0.0/0  # Allow all IPs - restrict in production

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: travel-adk-coordinator-hpa
  namespace: adk-travel
  labels:
    app: travel-adk-coordinator
    component: autoscaling
    version: "1.0"
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: travel-adk-coordinator
  
  minReplicas: 2
  maxReplicas: 10
  
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  
  # Advanced scaling behavior
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300  # 5 minutes
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60   # 1 minute
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: travel-adk-coordinator-pdb
  namespace: adk-travel
  labels:
    app: travel-adk-coordinator
    component: availability
    version: "1.0"
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: travel-adk-coordinator

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: travel-adk-coordinator-netpol
  namespace: adk-travel
  labels:
    app: travel-adk-coordinator
    component: security
    version: "1.0"
spec:
  podSelector:
    matchLabels:
      app: travel-adk-coordinator
  
  policyTypes:
  - Ingress
  - Egress
  
  ingress:
  # Allow traffic from LoadBalancer
  - from: []
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 8090
  
  # Allow traffic from other pods in namespace (for inter-service communication)
  - from:
    - namespaceSelector:
        matchLabels:
          name: adk-travel
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 8090
  
  egress:
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  
  # Allow HTTPS to Google APIs
  - to: []
    ports:
    - protocol: TCP
      port: 443
  
  # Allow HTTP/HTTPS for external APIs
  - to: []
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443
  
  # Allow communication within the same namespace
  - to:
    - namespaceSelector:
        matchLabels:
          name: adk-travel
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 8090

---
# Ingress for external access (optional - if using Ingress instead of LoadBalancer)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: travel-adk-coordinator-ingress
  namespace: adk-travel
  labels:
    app: travel-adk-coordinator
    component: ingress
    version: "1.0"
  annotations:
    # NGINX Ingress Controller annotations
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    
    # CORS
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    
    # Health checks
    nginx.ingress.kubernetes.io/upstream-hash-by: "$arg_conversation_id"
    
    # Timeouts
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    
    # Body size for large requests
    nginx.ingress.kubernetes.io/proxy-body-size: "1m"
    
    # Certificate management (if using cert-manager)
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  ingressClassName: nginx
  
  tls:
  - hosts:
    - adk-travel.yourdomain.com
    secretName: adk-travel-tls
  
  rules:
  - host: adk-travel.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: travel-adk-coordinator
            port:
              number: 80
      - path: /metrics
        pathType: Exact
        backend:
          service:
            name: travel-adk-coordinator
            port:
              number: 8090

---
# ServiceMonitor for Prometheus scraping (if using Prometheus Operator)
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: travel-adk-coordinator-metrics
  namespace: adk-travel
  labels:
    app: travel-adk-coordinator
    component: monitoring
    version: "1.0"
spec:
  selector:
    matchLabels:
      app: travel-adk-coordinator
  
  endpoints:
  - port: metrics
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s
    
  namespaceSelector:
    matchNames:
    - adk-travel